import {agent} from "supertest";
import {app} from '../src/app';
import {SETTINGS} from '../src/settings';
// import {db, methodsDB} from '../src/db/db'


const req = agent(app);

describe('—Ç–µ—Å—Ç—ã –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –±–ª–æ–≥–∞ –∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö ==> BLOGS üëá', () => { // tests for errors when creating blogs and for creating a blog
    beforeAll(async() => {
        await req.delete(SETTINGS.PATH.DELETEALL).expect(204)
    })
    
    it('—Å—Ç–∞—Ç—É—Å 401, –±–ª–æ–≥ –Ω–µ —Å–æ–∑–¥–∞–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω üëâ BLOG', async() => { // status 401, blog not created, not authorized
        const res = await req.post(SETTINGS.PATH.BLOGS).send({
            "name": "Tamerlan",
            "description": "creator of the devastating blow to the little finger",
            "websiteUrl": "https://showda.com"
        })
        expect(res.statusCode).toBe(401)
    })

    // TEST name
    it('—Å—Ç–∞—Ç—É—Å 400, –Ω–µ —Å–æ–∑–¥–∞–Ω, –µ—Å–ª–∏ –Ω–µ—Ç name üëâ BLOG', async() => { // status 400, not create blog if not name 
        const res = await req.post(SETTINGS.PATH.BLOGS).send({
            "name": "",
            "description": "creator of the devastating blow to the little finger",
            "websiteUrl": "https://showda.com"
        }).auth('admin','qwerty')
        expect(res.statusCode).toBe(400)
    })

    it('—Å—Ç–∞—Ç—É—Å 400, –±–ª–æ–≥ –Ω–µ —Å–æ–∑–¥–∞–Ω, name –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ 3 —Å–∏–º–≤–æ–ª–æ–≤  üëâ BLOG', async() => { // status 400, not create blog, the name must not be less than 3 characters
        const res = await req.post(SETTINGS.PATH.BLOGS).send({
            "name": "12",
            "description": "creator of the devastating blow to the little finger",
            "websiteUrl": "https://showda.com"
        }).auth('admin','qwerty')
        expect(res.statusCode).toBe(400)
    })

    it('—Å—Ç–∞—Ç—É—Å 400, –±–ª–æ–≥ –Ω–µ —Å–æ–∑–¥–∞–Ω, name –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 15 —Å–∏–º–≤–æ–ª–æ–≤  üëâ BLOG', async() => { // status 400, not create blog, the name must not be more than 15 characters
        const res = await req.post(SETTINGS.PATH.BLOGS).send({
            "name": "16 simbols festa",
            "description": "creator of the devastating blow to the little finger",
            "websiteUrl": "https://showda.com"
        }).auth('admin','qwerty')
        expect(res.statusCode).toBe(400)
    })

    it('—Å—Ç–∞—Ç—É—Å 400, –±–ª–æ–≥ –Ω–µ —Å–æ–∑–¥–∞–Ω, name –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null  üëâ BLOG', async() => { // status 400, not create blog, the name cannot be null
        const res = await req.post(SETTINGS.PATH.BLOGS).send({
            "name": null,
            "description": "creator of the devastating blow to the little finger",
            "websiteUrl": "https://showda.com"
        }).auth('admin','qwerty')
        expect(res.statusCode).toBe(400)
    })

    it('—Å—Ç–∞—Ç—É—Å 400, –±–ª–æ–≥ –Ω–µ —Å–æ–∑–¥–∞–Ω , name –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å undefined  üëâ BLOG', async() => { // status 400, not create blog, the name cannot be undefined
        const res = await req.post(SETTINGS.PATH.BLOGS).send({
            "name": undefined,
            "description": "creator of the devastating blow to the little finger",
            "websiteUrl": "https://showda.com"
        }).auth('admin','qwerty')
        expect(res.statusCode).toBe(400)
    })

    it('—Å—Ç–∞—Ç—É—Å 400, –±–ª–æ–≥ –Ω–µ —Å–æ–∑–¥–∞–Ω, name –Ω–µ —Å—Ç—Ä–æ–∫–∞  üëâ BLOG', async() => { // status 400, not create blog, name is not a string
        const res = await req.post(SETTINGS.PATH.BLOGS).send({
            "name": 1,
            "description": "creator of the devastating blow to the little finger",
            "websiteUrl": "https://showda.com"
        }).auth('admin','qwerty')
        expect(res.statusCode).toBe(400)
    })

    // TEST description
    it('—Å—Ç–∞—Ç—É—Å 400, –±–ª–æ–≥ –Ω–µ —Å–æ–∑–¥–∞–Ω , –Ω–µ—Ç description üëâ BLOG', async() => { // status 400, not create blog if not description
        const res = await req.post(SETTINGS.PATH.BLOGS).send({
            "name": "Tamerlan",
            "description": "",
            "websiteUrl": "https://showda.com"
        }).auth('admin','qwerty')
        expect(res.statusCode).toBe(400)
    })

    it('—Å—Ç–∞—Ç—É—Å 400, –±–ª–æ–≥ –Ω–µ —Å–æ–∑–¥–∞–Ω, description –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ 3 —Å–∏–º–≤–æ–ª–æ–≤  üëâ BLOG', async() => { // status 400, not create blog, the description must not be less than 3 characters
        const res = await req.post(SETTINGS.PATH.BLOGS).send({
            "name": "Tamerlan",
            "description": "12",
            "websiteUrl": "https://showda.com"
        }).auth('admin','qwerty')
        expect(res.statusCode).toBe(400)
    })

    it('—Å—Ç–∞—Ç—É—Å 400, –±–ª–æ–≥ –Ω–µ —Å–æ–∑–¥–∞–Ω, description –¥–ª–∏–Ω–µ–µ 500 —Å–∏–º–≤–æ–ª–æ–≤  üëâ BLOG', async() => { // status 400, not create blog, the description must not be more than 500 characters
        const res = await req.post(SETTINGS.PATH.BLOGS).send({
            "name": "Tamerlan",
            "description": `Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. 
                Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, 
                ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, 
                aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu 
                pede mollis pretium. Integer tincidunt. Cras dapibus`,
            "websiteUrl": "https://showda.com"
        }).auth('admin','qwerty')
        expect(res.statusCode).toBe(400)
    })

    it('—Å—Ç–∞—Ç—É—Å 400, –±–ª–æ–≥ –Ω–µ —Å–æ–∑–¥–∞–Ω, description –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null  üëâ BLOG', async() => { // status 400, not create blog, the description cannot be null
        const res = await req.post(SETTINGS.PATH.BLOGS).send({
            "name": "Tamerlan",
            "description": null,
            "websiteUrl": "https://showda.com"
        }).auth('admin','qwerty')
        expect(res.statusCode).toBe(400)
    })

    it('—Å—Ç–∞—Ç—É—Å 400, –±–ª–æ–≥ –Ω–µ —Å–æ–∑–¥–∞–Ω, description –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å undefined  üëâ BLOG', async() => { // status 400, not create blog, the description cannot be undefined
        const res = await req.post(SETTINGS.PATH.BLOGS).send({
            "name": 'Tamerlan',
            "description": undefined,
            "websiteUrl": "https://showda.com"
        }).auth('admin','qwerty')
        expect(res.statusCode).toBe(400)
    })

    it('—Å—Ç–∞—Ç—É—Å 400, –±–ª–æ–≥ –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å, description –Ω–µ —Å—Ç—Ä–æ–∫–∞ üëâ BLOG', async() => { // status 400, not create blog, description is not a string
        const res = await req.post(SETTINGS.PATH.BLOGS).send({
            "name": 'Tamerlan',
            "description": 1,
            "websiteUrl": "https://showda.com"
        }).auth('admin','qwerty')
        expect(res.statusCode).toBe(400)
    })

    // TEST websiteUrl
    it('—Å—Ç–∞—Ç—É—Å 400, –±–ª–æ–≥ –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å, –ø–æ–ª–µ WebsiteUrl –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω—É üëâ BLOG', async() => { // status 400, not create blog, websiteUrl field must match the pattern
        const res = await req.post(SETTINGS.PATH.BLOGS).send({
            "name": 'Tamerlan',
            "description": "creator of the devastating blow to the little finger",
            "websiteUrl": ""
        }).auth('admin','qwerty')
        expect(res.statusCode).toBe(400)
    })

    it('—Å—Ç–∞—Ç—É—Å 400, –±–ª–æ–≥ –Ω–µ —Å–æ–∑–¥–∞–Ω, –ø–æ–ª–µ websiteUrl –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç  üëâ BLOG', async() => { // status 400, not create blog, no websiteUrl field
        const res = await req.post(SETTINGS.PATH.BLOGS).send({
            "name": 'Tamerlan',
            "description": "creator of the devastating blow to the little finger"
        }).auth('admin','qwerty')
        expect(res.statusCode).toBe(400)
    })

    it('—Å—Ç–∞—Ç—É—Å 201, —Å–æ–∑–¥–∞—Ç—å –±–ª–æ–≥  üëâ BLOG', async() => { // status 201, create blog  
        const res = await req.post(SETTINGS.PATH.BLOGS).send({
            "name": "Tamerlan",
            "description": "creator of the devastating blow to the little finger",
            "websiteUrl": "https://showda.com"
        }).auth('admin','qwerty')
        expect(res.statusCode).toBe(201)
    })

})

// test for creating several blogs, returning all blogs, deleting one and returning the remaining ones 
describe('—Ç–µ—Å—Ç—ã –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –±–ª–æ–≥–æ–≤, –≤–æ–∑–≤—Ä–∞—Ç –≤—Å–µ—Ö –±–ª–æ–≥–æ–≤, —É–¥–∞–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∏ –≤–æ–∑–≤—Ä–∞—Ç –æ—Å—Ç–∞–ª—å–Ω—ã—Ö ==> BLOGS üëá', () => {
    beforeAll(async() => {
        await req.delete(SETTINGS.PATH.DELETEALL).expect(204)
    })

    let response1: any ;
    let response2: any ;
    let response3: any ;

    it('—Å–æ–∑–¥–∞—Ç—å 3 –±–ª–æ–≥–∞', async() => { // create 3 blogs
        response1 = await req.post(SETTINGS.PATH.BLOGS).send({
            "name": "Tamerlan-1",
            "description": "creator of the devastating blow to the little finger",
            "websiteUrl": "https://showda.com"
        }).auth('admin','qwerty').expect(201)

        response2 = await req.post(SETTINGS.PATH.BLOGS).send({
            "name": "Tamerlan-2",
            "description": "creator of the devastating blow to the little finger",
            "websiteUrl": "https://showda.com"
        }).auth('admin','qwerty').expect(201)

        response3 = await req.post(SETTINGS.PATH.BLOGS).send({
            "name": "Tamerlan-3",
            "description": "creator of the devastating blow to the little finger",
            "websiteUrl": "https://showda.com"
        }).auth('admin','qwerty').expect(201)
    })

    it('–ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –±–ª–æ–≥–∏', async() => { // get all blogs
        const res = await req.get(SETTINGS.PATH.BLOGS).expect(200);
        expect([response1.body,response2.body,response3.body]).toStrictEqual(res.body)
    })

    it('–ø–æ–ª—É—á–∏—Ç—å –±–ª–æ–≥–∏ –ø–æ id', async() => { // get blogs by id
        const res = await req.get(`${SETTINGS.PATH.BLOGS}/${response1.body.id}`).expect(200);
        expect(response1.body).toStrictEqual({
            "id": res.body.id,
            "name": res.body.name,
            "description": res.body.description,
            "websiteUrl": res.body.websiteUrl
        })
    })

    it('–Ω–µ —É–¥–∞–ª–∏—Ç –±–ª–æ–≥, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω', async() => { // will not delete the blog if the user is not authorized 
        await req.delete(`${SETTINGS.PATH.BLOGS}/${response1.id}`).expect(401)
    })

    it('—É–¥–∞–ª–∏—Ç—å –±–ª–æ–≥, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É', async() => { //delete blog if user is logged in 
        const result = await req.delete(`${SETTINGS.PATH.BLOGS}/${response1.body.id}`).auth('admin','qwerty')
        expect(result.statusCode).toBe(204) 
    })

    it('–±–ª–æ–≥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω', async() => { // blog to delete not found 
        await req.delete(`${SETTINGS.PATH.BLOGS}/${response1.id}`).auth('admin','qwerty').expect(404)
    })

    it('–æ—à–∏–±–∫–∞ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ id –±–ª–æ–≥–∞', async() => { // error for non-existent blog id
        const res = await req.get(`${SETTINGS.PATH.BLOGS}/${response1.body.id}`).expect(404);
    })

    it('–ø–æ–ª—É—á–∏—Ç—å –±–ª–æ–≥ –ø–æ id', async() => { // get blog by id
        await req.get(`${SETTINGS.PATH.BLOGS}/${response2.body.id}`).expect(200)
        
    })

    it('–ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –±–ª–æ–≥–∏', async() => { // get all blogs
        await req.get(`${SETTINGS.PATH.BLOGS}/${response2.body.id}`).expect(200)
        
    })
})


describe('—Ç–µ—Å—Ç—ã –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ, –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –Ω–∞ –æ—à–∏–±–∫—É –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –±–ª–æ–≥–∞  ==> BLOGS üëá', () => {
    beforeAll(async() => {
        await req.delete(SETTINGS.PATH.DELETEALL).expect(204)
    })

    let response: any ;

    it('—Å–æ–∑–¥–∞–Ω–∏–µ –±–ª–æ–≥–∞', async() => { // get all blogs
        response = await req.post(SETTINGS.PATH.BLOGS).send({
            "name": "Tamerlan",
            "description": "creator of the devastating blow to the little finger",
            "websiteUrl": "https://showda.com"
        }).auth('admin','qwerty').expect(201)
        
    })

    it('–Ω–µ –∏–∑–º–µ–Ω–∏—Ç –±–ª–æ–≥, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω', async() => { // get all blogs
        await req.put(`${SETTINGS.PATH.BLOGS}/${response.body.id}`).send({
            "name": "Mariarty",
            "description": "creator of the devastating blow to the little finger",
            "websiteUrl": "https://showda.com/tamerlan"
        }).expect(401)
        
    })

    it('–Ω–µ –∏–∑–º–µ–Ω–∏—Ç –±–ª–æ–≥ , –Ω–µ –≤–µ—Ä–Ω—ã–π id', async() => { // get all blogs
        await req.put(`${SETTINGS.PATH.BLOGS}/1732197042511`).send({
            "name": "Mariarty",
            "description": "creator of the devastating blow to the little finger",
            "websiteUrl": "https://showda.com/tamerlan"
        }).auth('admin','qwerty').expect(404)
        
    })

    it('–∏–∑–º–µ–Ω–∏—Ç—å –±–ª–æ–≥', async() => { // get all blogs
        await req.put(`${SETTINGS.PATH.BLOGS}/${response.body.id}`).send({
            "name": "Mariarty",
            "description": "creator of the devastating blow to the little finger",
            "websiteUrl": "https://showda.com/tamerlan"
        }).auth('admin','qwerty').expect(204)
        
    })

    it('–ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –±–ª–æ–≥–∏', async() => { // get all blogs
        await req.get(SETTINGS.PATH.BLOGS).expect(200)
        
    })

})

// –¢–ï–°–¢–´ –ù–ê POSTS
describe('—Ç–µ—Å—Ç—ã –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–æ—Å—Ç–æ–≤ ==> POSTS  üëá', () => {
    beforeAll(async() => {
        await req.delete(SETTINGS.PATH.DELETEALL).expect(204)
    })

    let response: any ;

    it('—Å–æ–∑–¥–∞–Ω–∏–µ –±–ª–æ–≥–∞', async() => { // get all blogs
        response = await req.post(SETTINGS.PATH.BLOGS).send({
            "name": "Tamerlan",
            "description": "creator of the devastating blow to the little finger",
            "websiteUrl": "https://showda.com"
        }).auth('admin','qwerty').expect(201)
        
    })

    it('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω', async() => {
        await req.post(SETTINGS.PATH.POSTS).send({
            "title": "the title",
            "shortDescription": "string",
            "content": "string",
            "blogId": response.body.id,
        }).expect(401)
    })

    it('–Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–ª–æ–≥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ title', async() => {
        await req.post(SETTINGS.PATH.POSTS).send({
            "shortDescription": "string",
            "content": "string",
            "blogId": "string",
        }).auth('admin','qwerty').expect(400)
    })

    it('–Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–ª–æ–≥ title –ø—É—Å—Ç', async() => {
        await req.post(SETTINGS.PATH.POSTS).send({
            "title": "",
            "shortDescription": "string",
            "content": "string",
            "blogId": "string"
        }).auth('admin','qwerty').expect(400)
    })

    it('–Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–ª–æ–≥ title –Ω–µ —Å—Ç—Ä–æ–∫–∞', async() => {
        await req.post(SETTINGS.PATH.POSTS).send({
            "title": 1,
            "shortDescription": "string",
            "content": "string",
            "blogId": "string"
        }).auth('admin','qwerty').expect(400)
    })

    it('–Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–ª–æ–≥ title –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞', async() => {
        await req.post(SETTINGS.PATH.POSTS).send({
            "title": "  ",
            "shortDescription": "string",
            "content": "string",
            "blogId": "string"
        }).auth('admin','qwerty').expect(400)
    })

    it('–Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–ª–æ–≥ title undefined', async() => {
        await req.post(SETTINGS.PATH.POSTS).send({
            "title": undefined,
            "shortDescription": "string",
            "content": "string",
            "blogId": "string"
        }).auth('admin','qwerty').expect(400)
    })

    it('–Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–ª–æ–≥ title null', async() => {
        await req.post(SETTINGS.PATH.POSTS).send({
            "title": null,
            "shortDescription": "string",
            "content": "string",
            "blogId": "string"
        }).auth('admin','qwerty').expect(400)
    })

    it('–Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–ª–æ–≥ title –¥–ª–∏–Ω–µ–µ 30 —Å–∏–º–≤–æ–ª–æ–≤', async() => {
        await req.post(SETTINGS.PATH.POSTS).send({
            "title": "title length > 30 , hu laike a dogz aut",
            "shortDescription": "string",
            "content": "string",
            "blogId": "string"
        }).auth('admin','qwerty').expect(400)
    })

    it('–Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–ª–æ–≥ title –º–µ–Ω—å—à–µ 3 —Å–∏–º–≤–æ–ª–æ–≤', async() => {
        await req.post(SETTINGS.PATH.POSTS).send({
            "title": "ti",
            "shortDescription": "string",
            "content": "string",
            "blogId": "string"
        }).auth('admin','qwerty').expect(400)
    })

    it('–Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–ª–æ–≥ shortDescription –º–µ–Ω—å—à–µ 3 —Å–∏–º–≤–æ–ª–æ–≤', async() => {
        await req.post(SETTINGS.PATH.POSTS).send({
            "title": "title ok",
            "shortDescription": "st",
            "content": "string",
            "blogId": "string"
        }).auth('admin','qwerty').expect(400)
    })

    it('–Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–ª–æ–≥ shortDescription –±–æ–ª—å—à–µ 100 —Å–∏–º–≤–æ–ª–æ–≤', async() => {
        await req.post(SETTINGS.PATH.POSTS).send({
            "title": "title ok",
            "shortDescription": "st—ã–≤–ª–ª–∂—ã–∞–ª—Ñ—ã–ª—Ñ—ç–∂–∞–ª–∑—Ü–ª—É–∑–∞—Ñ—ç–∑—É–ª–∞—â—É—Ü–ª–∞–æ–π—Ü–∫–π—à–π—â–∞–∑—â–ª—à–∞—Ü—â–ª—É–æ—ç—Ü–æ–∞—Ü—ç–∞—Ü–∑—â–æ–∫–∑—â—Ü–æ–≤—â–∞–æ—ã—â—É–∞—Ä—É–∞–∂–≤–º—Ñ—Ç—à—É–æ–∞—Ñ—â—Ü–æ—É–ª—é—Ç—ã–ª–≤—Ç—Å—Ü—à—É—Ä",
            "content": "string",
            "blogId": "string"
        }).auth('admin','qwerty').expect(400)
    })

    it('–Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–ª–æ–≥ –ø–æ–ª–µ shortDescription –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', async() => {
        await req.post(SETTINGS.PATH.POSTS).send({
            "title": "title ok",
            "content": "string",
            "blogId": "string"
        }).auth('admin','qwerty').expect(400)
    })

    it('–Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–ª–æ–≥ shortDescription –ø—É—Å—Ç–æ', async() => {
        await req.post(SETTINGS.PATH.POSTS).send({
            "title": "title ok",
            "shortDescription": "  ",
            "content": "string",
            "blogId": "string"
        }).auth('admin','qwerty').expect(400)
    })

    it('–Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–ª–æ–≥ shortDescription –Ω–µ —Å—Ç—Ä–æ–∫–∞', async() => {
        await req.post(SETTINGS.PATH.POSTS).send({
            "title": "title ok",
            "shortDescription": "st",
            "content": "string",
            "blogId": "string"
        }).auth('admin','qwerty').expect(400)
    })

    it('–Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–ª–æ–≥ shortDescription –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null', async() => {
        await req.post(SETTINGS.PATH.POSTS).send({
            "title": "title ok",
            "shortDescription": null,
            "content": "string",
            "blogId": "string"
        }).auth('admin','qwerty').expect(400)
    })

    it('–Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–ª–æ–≥ shortDescription –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å undefined', async() => {
        await req.post(SETTINGS.PATH.POSTS).send({
            "title": "title ok",
            "shortDescription": undefined,
            "content": "string",
            "blogId": "string"
        }).auth('admin','qwerty').expect(400)
    })

    it('–Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–ª–æ–≥ content –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å undefined', async() => {
        await req.post(SETTINGS.PATH.POSTS).send({
            "title": "title ok",
            "shortDescription": "string",
            "content": undefined,
            "blogId": "string"
        }).auth('admin','qwerty').expect(400)
    })

    it('–Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–ª–æ–≥ content –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null', async() => {
        await req.post(SETTINGS.PATH.POSTS).send({
            "title": "title ok",
            "shortDescription": "string",
            "content": null,
            "blogId": "string"
        }).auth('admin','qwerty').expect(400)
    })

    it('–Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–ª–æ–≥ content –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 3 —Å–∏–º–≤–æ–ª–æ–≤', async() => {
        await req.post(SETTINGS.PATH.POSTS).send({
            "title": "title ok",
            "shortDescription": "string",
            "content": 'nu',
            "blogId": "string"
        }).auth('admin','qwerty').expect(400)
    })

    it('–Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–ª–æ–≥ –ø–æ–ª–µ content –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', async() => {
        await req.post(SETTINGS.PATH.POSTS).send({
            "title": "title ok",
            "shortDescription": "string",
            "blogId": "string"
        }).auth('admin','qwerty').expect(400)
    })

    it('–Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–ª–æ–≥ content –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null', async() => {
        await req.post(SETTINGS.PATH.POSTS).send({
            "title": "title ok",
            "shortDescription": "string",
            "content": null,
            "blogId": "string"
        }).auth('admin','qwerty').expect(400)
    })

    it('–Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–ª–æ–≥ content –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å undefined', async() => {
        await req.post(SETTINGS.PATH.POSTS).send({
            "title": "title ok",
            "shortDescription": "string",
            "content": undefined,
            "blogId": "string"
        }).auth('admin','qwerty').expect(400)
    })

    it('–Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–ª–æ–≥ –ø–æ–ª–µ content –¥–æ–ª–∂–µ–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π', async() => {
        await req.post(SETTINGS.PATH.POSTS).send({
            "title": "title ok",
            "shortDescription": "string",
            "content": 1,
            "blogId": "string"
        }).auth('admin','qwerty').expect(400)
    })

    it('–Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–ª–æ–≥ , blogId –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å undefined', async() => {
        await req.post(SETTINGS.PATH.POSTS).send({
            "title": "title ok",
            "shortDescription": "string",
            "content": "string",
            "blogId": "string"
        }).auth('admin','qwerty').expect(400)
    })

    it('–Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–ª–æ–≥ , blogId –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null', async() => {
        await req.post(SETTINGS.PATH.POSTS).send({
            "title": "title ok",
            "shortDescription": "string",
            "content": "string",
            "blogId": null
        }).auth('admin','qwerty').expect(400)
    })

    it('–Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–ª–æ–≥ , –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ blogId', async() => {
        await req.post(SETTINGS.PATH.POSTS).send({
            "title": "title ok",
            "shortDescription": "string",
            "content": "string",
        }).auth('admin','qwerty').expect(400)
    })

    it('–Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–ª–æ–≥ , –ø–æ–ª–µ blogId –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π', async() => {
        await req.post(SETTINGS.PATH.POSTS).send({
            "title": "title ok",
            "shortDescription": "string",
            "content": "string",
            "blogId": 1
        }).auth('admin','qwerty').expect(400)
    })

    it('–Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–ª–æ–≥ , blogId –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null', async() => {
        await req.post(SETTINGS.PATH.POSTS).send({
            "title": "title ok",
            "shortDescription": "string",
            "content": "string",
            "blogId": null
        }).auth('admin','qwerty').expect(400)
    })

})

describe('—Ç–µ—Å—Ç—ã –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ , –ø–æ–ª—É—á–µ–Ω–∏–µ , –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ ==> POSTS  üëá', () => {
    beforeAll(async() => {
        await req.delete(SETTINGS.PATH.DELETEALL).expect(204)
    })

    let response: any ;

    it('—Å–æ–∑–¥–∞–Ω–∏–µ –±–ª–æ–≥–∞', async() => { // get all blogs
        response = await req.post(SETTINGS.PATH.BLOGS).send({
            "name": "Tamerlan",
            "description": "creator of the devastating blow to the little finger",
            "websiteUrl": "https://showda.com"
        }).auth('admin','qwerty').expect(201)
        
    })

    it('—Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç', async() => {
        await req.post(SETTINGS.PATH.POSTS).send({
            "title": "the title",
            "shortDescription": "string",
            "content": "string",
            "blogId": response.body.id,
        }).auth('admin','qwerty').expect(201)
    })

    let result: any ;

    it('–ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ—Å—Ç—ã', async() => {
        result = await req.get(SETTINGS.PATH.POSTS).expect(200);
        expect(result.body).toEqual([{
            "title": "the title",
            "id": result.body[0].id,
            "blogName": response.body.name,
            "shortDescription": "string",
            "content": "string",
            "blogId": response.body.id
        }])
    })

    it('–∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å—Ç', async() => {
        await req.put(`${SETTINGS.PATH.POSTS}/${result.body[0].id}`).send({
            "title": "new title from put requst",
            "shortDescription": "new string",
            "content": "new string",
            "blogId": response.body.id,
        }).auth('admin','qwerty').expect(204)
    })

    it('—É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç', async() => {
        await req.delete(`${SETTINGS.PATH.POSTS}/${result.body[0].id}`).auth('admin','qwerty').expect(204)
    })

    
})